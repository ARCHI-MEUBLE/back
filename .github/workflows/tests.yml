name: Tests

# D√©clencher les tests √† chaque push et pull request
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# D√©finir des jobs qui tournent en parall√®le
jobs:
  # ==========================================
  # JOB 1 : Tests Python
  # ==========================================
  test-python:
    name: Tests Python et D√©pendances
    runs-on: ubuntu-latest

    steps:
      # 1. R√©cup√©rer le code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Installer Python 3.11
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. Cache pip pour acc√©l√©rer
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Installer les d√©pendances
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 5. V√©rifier l'import de chaque module
      - name: Test imports des modules Python
        run: |
          echo "üîç Test des imports..."
          python -c "import numpy; print('‚úÖ NumPy OK')"
          python -c "import pyvista; print('‚úÖ PyVista OK')"
          python -c "import vtk; print('‚úÖ VTK OK')"
          python -c "import trimesh; print('‚úÖ Trimesh OK')"
          python -c "import ezdxf; print('‚úÖ ezdxf OK')"
          python -c "import svgwrite; print('‚úÖ svgwrite OK')"
          python -c "import scipy; print('‚úÖ SciPy OK')"
          python -c "import PIL; print('‚úÖ Pillow OK')"
          python -c "import networkx; print('‚úÖ NetworkX OK')"
          python -c "import svgpathtools; print('‚úÖ svgpathtools OK')"
          echo "‚úÖ Tous les modules s'importent correctement !"

      # 6. V√©rifier la syntaxe de procedure.py
      - name: Check syntax procedure.py
        run: |
          echo "üîç V√©rification de la syntaxe Python..."
          python -m py_compile procedure.py
          echo "‚úÖ Syntaxe Python correcte !"

      # 7. Test basique : cr√©er un meuble simple
      - name: Test cr√©ation meuble simple
        run: |
          echo "üß™ Test de g√©n√©ration d'un meuble basique..."
          # Test avec un meuble simple
          python procedure.py "M1(1000,400,1000)E" || echo "‚ö†Ô∏è Test meuble simple √©chou√©"
          
          # V√©rifier que les fichiers GLB sont cr√©√©s
          if [ -f "meuble.glb" ]; then
            echo "‚úÖ meuble.glb cr√©√© avec succ√®s"
          else
            echo "‚ùå meuble.glb non cr√©√©"
            exit 1
          fi

  # ==========================================
  # JOB 2 : Tests PHP
  # ==========================================
  test-php:
    name: Tests PHP
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Installer PHP 8.2
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: json, fileinfo

      # V√©rifier la syntaxe de tous les fichiers PHP
      - name: Check PHP syntax
        run: |
          echo "üîç V√©rification de la syntaxe PHP..."
          FILES_CHECKED=0
          ERRORS=0
          
          for file in *.php; do
            if [ -f "$file" ]; then
              echo "  V√©rification de $file..."
              if php -l "$file" > /dev/null 2>&1; then
                echo "  ‚úÖ $file OK"
              else
                echo "  ‚ùå $file ERREUR"
                php -l "$file"
                ERRORS=$((ERRORS + 1))
              fi
              FILES_CHECKED=$((FILES_CHECKED + 1))
            fi
          done
          
          echo ""
          echo "üìä R√©sultat : $FILES_CHECKED fichiers v√©rifi√©s"
          
          if [ $ERRORS -gt 0 ]; then
            echo "‚ùå $ERRORS fichier(s) avec erreurs"
            exit 1
          else
            echo "‚úÖ Tous les fichiers PHP sont valides !"
          fi

      # Test des fichiers JSON
      - name: Validate JSON files
        run: |
          echo "üîç Validation des fichiers JSON..."
          
          # Tester devis.json
          if [ -f "devis.json" ]; then
            if python -m json.tool devis.json > /dev/null 2>&1; then
              echo "‚úÖ devis.json valide"
            else
              echo "‚ùå devis.json invalide"
              exit 1
            fi
          fi
          
          # Tester produit.json
          if [ -f "produit.json" ]; then
            if python -m json.tool produit.json > /dev/null 2>&1; then
              echo "‚úÖ produit.json valide"
            else
              echo "‚ùå produit.json invalide"
              exit 1
            fi
          fi

  # ==========================================
  # JOB 3 : V√©rification de la structure
  # ==========================================
  test-structure:
    name: V√©rifier la structure du projet
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check required files and folders
        run: |
          echo "üîç V√©rification de la structure du projet..."
          ERRORS=0
          
          # Fichiers essentiels
          echo ""
          echo "üìÑ V√©rification des fichiers essentiels..."
          for file in "procedure.py" "requirements.txt" "00.php" "01.php" "02.php" "03.php" ".gitignore"; do
            if [ -f "$file" ]; then
              echo "  ‚úÖ $file existe"
            else
              echo "  ‚ùå $file manquant"
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          # Dossiers essentiels
          echo ""
          echo "üìÅ V√©rification des dossiers essentiels..."
          for dir in "crm" "devis" "pieces" "uploads" "textures"; do
            if [ -d "$dir" ]; then
              echo "  ‚úÖ dossier $dir existe"
            else
              echo "  ‚ùå dossier $dir manquant"
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          echo ""
          if [ $ERRORS -gt 0 ]; then
            echo "‚ùå $ERRORS √©l√©ment(s) manquant(s)"
            exit 1
          else
            echo "‚úÖ Structure du projet correcte !"
          fi

  # ==========================================
  # JOB 4 : Tests d'int√©gration
  # ==========================================
  test-integration:
    name: Tests d'int√©gration
    runs-on: ubuntu-latest
    needs: [test-python, test-php]  # Attend que les tests de base passent

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Test workflow complet
        run: |
          echo "üß™ Test du workflow complet..."
          
          # 1. G√©n√©rer un meuble
          echo "1Ô∏è‚É£ G√©n√©ration du meuble..."
          python procedure.py "M1(800,400,600)EF" || exit 1
          
          # 2. V√©rifier les outputs
          echo "2Ô∏è‚É£ V√©rification des outputs..."
          
          # GLB files
          for file in "meuble.glb" "meublep.glb" "meublen.glb" "meublenp.glb"; do
            if [ -f "$file" ]; then
              SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
              if [ "$SIZE" -gt 1000 ]; then
                echo "  ‚úÖ $file cr√©√© ($SIZE bytes)"
              else
                echo "  ‚ö†Ô∏è $file trop petit ($SIZE bytes)"
              fi
            else
              echo "  ‚ùå $file non cr√©√©"
              exit 1
            fi
          done
          
          # DXF/SVG files
          if [ -f "pieces/piece_general.dxf" ]; then
            echo "  ‚úÖ DXF cr√©√©"
          else
            echo "  ‚ùå DXF non cr√©√©"
            exit 1
          fi
          
          if [ -f "pieces/piece_general.svg" ]; then
            echo "  ‚úÖ SVG cr√©√©"
          else
            echo "  ‚ùå SVG non cr√©√©"
            exit 1
          fi
          
          # JSON output
          if [ -f "produit.json" ]; then
            echo "  ‚úÖ produit.json cr√©√©"
            # V√©rifier que le prix est calcul√©
            if grep -q '"prixht"' produit.json; then
              echo "  ‚úÖ Prix calcul√©"
            else
              echo "  ‚ùå Prix non calcul√©"
              exit 1
            fi
          fi
          
          echo "‚úÖ Workflow complet OK !"

  # ==========================================
  # R√©sum√© final
  # ==========================================
  summary:
    name: R√©sum√© des tests
    runs-on: ubuntu-latest
    needs: [test-python, test-php, test-structure, test-integration]
    if: always()

    steps:
      - name: Test Summary
        run: |
          echo "üìä R√âSUM√â DES TESTS CI/CD"
          echo "================================"
          echo ""
          echo "‚úÖ Tests Python : ${{ needs.test-python.result }}"
          echo "‚úÖ Tests PHP : ${{ needs.test-php.result }}"
          echo "‚úÖ Structure : ${{ needs.test-structure.result }}"
          echo "‚úÖ Int√©gration : ${{ needs.test-integration.result }}"
          echo ""
          echo "================================"






