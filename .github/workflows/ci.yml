name: Backend CI/CD

on:
  pull_request:
    branches: [dev, main]
  push:
    branches: [dev, main]

jobs:
  lint-and-test:
    name: Lint and Test PHP Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_sqlite, sqlite3
          coverage: none

      - name: Validate PHP syntax
        run: |
          echo "Checking PHP syntax for all PHP files..."
          error_found=0
          for file in $(find . -name "*.php" -not -path "./vendor/*" -not -path "./SVGnest/*"); do
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "❌ Syntax error in: $file"
              php -l "$file"
              error_found=1
            fi
          done
          if [ $error_found -eq 0 ]; then
            echo "✅ All PHP files have valid syntax"
          else
            exit 1
          fi

      - name: Check Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "❌ Dockerfile not found"
            exit 1
          fi
          echo "✅ Dockerfile found"

      - name: Validate init_db.sh line endings
        run: |
          if file init_db.sh | grep -q CRLF; then
            echo "❌ init_db.sh has Windows line endings (CRLF). Convert to Unix (LF)"
            exit 1
          fi
          echo "✅ init_db.sh has correct Unix line endings"

      - name: Check required files
        run: |
          required_files=("router.php" "backend/core/Database.php" "backend/core/Router.php" "init_db.sh")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"

      - name: Test database initialization
        run: |
          echo "Testing database initialization..."

          # Create test directories in /tmp instead of /data
          mkdir -p /tmp/test_db/database
          mkdir -p /tmp/test_db/uploads/models

          # Extract SQL from init_db.sh and execute it
          DB_PATH="/tmp/test_db/database/test.db"

          # Create database with SQL schema
          sqlite3 "$DB_PATH" <<'EOF'
          CREATE TABLE IF NOT EXISTS users (
              id TEXT PRIMARY KEY,
              email TEXT NOT NULL UNIQUE,
              password_hash TEXT NOT NULL,
              name TEXT,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS admins (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              username TEXT NOT NULL UNIQUE,
              password TEXT NOT NULL,
              email TEXT,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS models (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              name TEXT NOT NULL,
              prompt TEXT NOT NULL,
              description TEXT,
              price REAL DEFAULT 0.0,
              image_url TEXT,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
              updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
          );
          EOF

          # Verify database was created
          if [ ! -f "$DB_PATH" ]; then
            echo "❌ Database not created"
            exit 1
          fi

          # Verify tables exist
          tables=$(sqlite3 "$DB_PATH" ".tables")
          if [[ $tables == *"admins"* && $tables == *"models"* && $tables == *"users"* ]]; then
            echo "✅ Database initialized successfully with all tables"
          else
            echo "❌ Database tables missing: $tables"
            exit 1
          fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t archimeuble-backend:test .
          echo "✅ Docker image built successfully"

      - name: Test Docker container startup
        run: |
          # Start container in background
          docker run -d --name test-backend -p 8000:8000 archimeuble-backend:test

          # Wait for container to start
          sleep 10

          # Check if container is running
          if docker ps | grep test-backend; then
            echo "✅ Docker container started successfully"
          else
            echo "❌ Docker container failed to start"
            docker logs test-backend
            exit 1
          fi

          # Cleanup
          docker stop test-backend
          docker rm test-backend

  security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for sensitive files
        run: |
          sensitive_patterns=(".env" "credentials" "private_key" "secret")
          found_sensitive=false

          for pattern in "${sensitive_patterns[@]}"; do
            if git ls-files | grep -i "$pattern" | grep -v ".env.example"; then
              echo "⚠️  Warning: Potential sensitive file found matching '$pattern'"
              found_sensitive=true
            fi
          done

          if [ "$found_sensitive" = true ]; then
            echo "⚠️  Please review files above to ensure no secrets are committed"
          else
            echo "✅ No obvious sensitive files found"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, security-check]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.lint-and-test.result }}" = "success" ] && \
             [ "${{ needs.docker-build.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "✅ All CI checks passed! Ready to merge."
            exit 0
          else
            echo "❌ Some CI checks failed. Please fix before merging."
            exit 1
          fi
